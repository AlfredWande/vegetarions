import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Configuration de la page
st.set_page_config(
    page_title="Analyse nutrionnelles des recettes v√©g√©tariennes / vegan",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ajouter du CSS pour personnaliser le design
def local_css(file_name):
    try:
        with open(file_name) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    except FileNotFoundError:
        st.error(f"Le fichier CSS '{file_name}' est introuvable. Assurez-vous qu'il existe dans le r√©pertoire du projet.")

# Chargement du fichier CSS (assurez-vous qu'il existe dans votre projet)
local_css("style.css")

# CSS pour changer le fond de l'application en noir et les √©crits en blanc
st.markdown(
    """
    <style>
    body {
        background-color: black;
        color: black;
    }
    .stApp {
        background: url('https://img-3.journaldesfemmes.fr/x9Ghv5tUnuHOrOkweGUIuP2cPZU=/1240x/smart/38888207364b4e12a4058004322afa49/ccmcms-jdf/36666882.jpg') no-repeat center center fixed;
        background-size: cover;
    }
    .main-title {
        background: rgba(0, 0, 0, 0.8); /* Change background to semi-transparent black */
        padding: 40px;
        border-radius: 15px;
        margin-bottom: 20px;
        color: white; /* Change text color to white */
    }
    .content {
        background: rgba(0, 0, 0, 0.6); /* Change background to semi-transparent black */
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        color: white; /* Change text color to white */
    }
  .css-1d391kg {  
        background-color: black !important; /* Change la couleur de fond de la sidebar */
        color: white !important; /* Change la couleur du texte de la sidebar */
    }
    .css-1v3fvcr, .css-1v3fvcr span {  
        color: white !important; /* Change √©galement la couleur des sous-titres ou du texte de menu */
    }
    </style>
    """,
    unsafe_allow_html=True
)


# Charger les donn√©es pour visualisation
file_path = "./data/cleaned_recipes.csv"
data = pd.read_csv(file_path)

# Titre principal avec un fond visuel
st.markdown(
    """
    <div class="main-title">
        <h1 style="color: white; text-align: center; font-size: 3.5em;">üå± Analyse des Recettes V√©g√©tariennes</h1>
        <p style="color: white; text-align: center; font-size: 1.5em;">Une exploration interactive des recettes v√©g√©tariennes et de leurs bienfaits nutritionnels.</p>
    </div>
    """,
    unsafe_allow_html=True
)

# Menu lat√©ral stylis√©
st.sidebar.header("Navigation")
st.sidebar.markdown("Choisissez ce que vous souhaitez explorer :")

menu_options = [
    "Accueil",
    "Objectifs de l'application",
    "Visualisations",
    "Exploration Interactive",
    "√Ä propos"
]
selected_option = st.sidebar.radio("Sections", menu_options)

# Section Accueil
if selected_option == "Accueil":
    st.subheader("Bienvenue sur l'application d'analyse des recettes v√©g√©tariennes !")
    st.markdown(
        """
        <div class="content">
        Cette application permet de d'observer quelques tendances nutritionnelles dans les recettes v√©g√©tariennes / vegan..
        - Explorer les diff√©rences entre recettes v√©g√©tariennes / vegan et les autres recettes.

        Utilisez le menu √† gauche pour en savoir plus !
        </div>
        """,
        unsafe_allow_html=True
    )

# Section Objectifs de l'application
if selected_option == "Objectifs de l'application":
    st.subheader("Objectifs de l'application")
    st.markdown(
        """
        <div class="content">
        ### Nos objectifs :
        - **Analyser les variables nutritionnelles** : D√©couvrez comment les nutriments varient entre les types de recettes.
        - **Fournir une interface intuitive** : Naviguez facilement √† travers les analyses et visualisations.

        Nous esp√©rons que cette application sera une ressource utile pour les amateurs de cuisine saine.
        </div>
        """,
        unsafe_allow_html=True
    )

# Section Visualisations
if selected_option == "Visualisations":
    st.subheader("Visualisations des Donn√©es")
    st.markdown("S√©lectionnez le graphique que vous souhaitez afficher :")

    # Options de visualisation
    vis_options = [
        "R√©partition des Recettes",
        "Diagramme en Barres des Types de Recettes",
        "Statistiques descriptives",
        "Boxplots des Variables Nutritionnelles",
        "Comparaison par Type de Recette V√©g√©tarienne",
        "Recette V√©gane",
        "Comparaison des Calories par Type de Recette",
        "Comparaison des Prot√©ines par Type de Recette",
        "Comparaison de la Complexit√© des Recettes",
        "Comparaison S√©par√©e de la Complexit√© des Recettes",
        "Matrice de Corr√©lation des Variables S√©lectionn√©es"
    ]
    selected_vis = st.radio("Graphiques", vis_options)

    # Affichage des visualisations en fonction de la s√©lection
    if selected_vis == "R√©partition des Recettes":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique montre la r√©partition des recettes v√©g√©tariennes et non-v√©g√©tariennes. Les pourcentages indiquent la proportion de chaque type de recette.
            </div>
            """,
            unsafe_allow_html=True
        )
        num_vegetarian = data[data['vege'] == 1].shape[0]
        num_vegan = data[data['vegan_final'] == 1].shape[0]
        num_non_vegetarian = data[data['vege'] == 0].shape[0]

        total = num_vegetarian + num_non_vegetarian
        vegetarian_vs_other = [num_vegetarian, num_non_vegetarian]
        vegetarian_vs_other_labels = ['V√©g√©tariennes', 'Non V√©g√©tariennes']
        vegetarian_vs_other_percentages = [(count / total) * 100 for count in vegetarian_vs_other]

        fig, ax = plt.subplots(figsize=(5, 5))
        ax.pie(vegetarian_vs_other_percentages, labels=vegetarian_vs_other_labels, autopct="%.1f%%", startangle=90, colors=["#66b3ff", "#99ff99"])
        ax.set_title("R√©partition des recettes (V√©g√©tariennes vs Non V√©g√©tariennes)")
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Diagramme en Barres des Types de Recettes":
        st.subheader("Diagramme en Barres des Types de Recettes")
        recipe_counts = data['recipe_type'].value_counts()
        fig, ax = plt.subplots()
        sns.barplot(x=recipe_counts.index, y=recipe_counts.values, ax=ax)
        ax.set_title("Nombre de Recettes par Type")
        ax.set_xlabel("Type de Recette")
        ax.set_ylabel("Nombre de Recettes")
        st.pyplot(fig)

    elif selected_vis == "Statistiques Descriptives":
        st.subheader("Statistiques Descriptives")
        st.write(data.describe())


    elif selected_vis == "Boxplots des Variables Nutritionnelles":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique montre la distribution des diff√©rentes variables nutritionnelles. Les boxplots permettent de visualiser la m√©diane, les quartiles et les valeurs extr√™mes pour chaque variable.
            </div>
            """,
            unsafe_allow_html=True
        )
        variables = [
            "calories",
            "sodium (PDV%)",
            "protein (PDV%)",
            "total fat (PDV%)",
            "saturated fat (PDV%)",
            "carbohydrates (PDV%)",
        ]
        df_melted = data[variables].melt(var_name="Variable", value_name="Valeur")
        fig, ax = plt.subplots(figsize=(8, 4))
        sns.boxplot(x="Variable", y="Valeur", data=df_melted, palette="Set2", ax=ax)
        ax.set_title("Boxplots regroup√©s des Variables Nutritionnelles")
        ax.set_xlabel("Variables")
        ax.set_ylabel("Valeurs")
        ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
        ax.grid(True)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Boxplots par Type de Recette V√©g√©tarienne":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique compare les variables nutritionnelles entre les recettes v√©g√©tariennes et non-v√©g√©tariennes. Les boxplots montrent les diff√©rences de distribution pour chaque variable.
            </div>
            """,
            unsafe_allow_html=True
        )
        variables = ["calories", "sodium (PDV%)", "protein (PDV%)"]
        fig, axes = plt.subplots(1, 3, figsize=(9, 3))
        for i, var in enumerate(variables):
            sns.boxplot(x="vege", y=var, data=data, palette="Set2", ax=axes[i])
            axes[i].set_title(f"{var}")
            axes[i].set_xlabel("(0 = Non-V√©g√©tarienne, 1 = V√©g√©tarienne)")
            axes[i].set_ylabel(var)
            axes[i].grid(True)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Boxplots par Type de Recette V√©gane":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique compare les variables nutritionnelles entre les recettes v√©ganes et non-v√©ganes. Les boxplots montrent les diff√©rences de distribution pour chaque variable.
            </div>
            """,
            unsafe_allow_html=True
        )
        variables = ["calories", "sodium (PDV%)", "protein (PDV%)"]
        fig, axes = plt.subplots(1, 3, figsize=(9, 3))
        for i, var in enumerate(variables):
            sns.boxplot(x="vegan_final", y=var, data=data, palette="Set2", ax=axes[i])
            axes[i].set_title(f"{var}")
            axes[i].set_xlabel("(0 = Non-Vegan, 1 = Vegan)")
            axes[i].set_ylabel(var)
            axes[i].grid(True)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Comparaison des Calories par Type de Recette":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique compare les calories entre les diff√©rents types de recettes (v√©g√©tariennes, v√©ganes et autres). Les boxplots montrent la distribution des calories pour chaque type de recette.
            </div>
            """,
            unsafe_allow_html=True
        )
        data['recipe_type'] = data.apply(
            lambda row: 'Vegan' if row['vegan_final'] == 1
                        else 'Vegetarienne' if row['vege'] == 1
                        else 'Other', axis=1
        )
        fig, ax = plt.subplots(figsize=(6, 3))
        sns.boxplot(x='recipe_type', y='calories', data=data, palette="Set2", ax=ax)
        ax.set_title("Comparaison des Calories par Type de Recette")
        ax.set_xlabel("Type de Recette")
        ax.set_ylabel("Calories")
        ax.grid(True)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Comparaison des Prot√©ines par Type de Recette":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique montre la moyenne des prot√©ines pour chaque type de recette (v√©g√©tariennes, v√©ganes et autres). Les barres d'erreur indiquent l'√©cart-type.
            </div>
            """,
            unsafe_allow_html=True
        )
        data['recipe_type'] = data.apply(
            lambda row: 'Vegan' if row['vegan_final'] == 1
                        else 'Vegetarienne' if row['vege'] == 1
                        else 'Other', axis=1
        )
        fig, ax = plt.subplots(figsize=(6, 3))
        sns.barplot(x='recipe_type', y='protein (PDV%)', data=data, errorbar='sd', palette="pastel", ax=ax)
        ax.set_title("Moyenne des Prot√©ines par Type de Recette")
        ax.set_xlabel("Type de Recette")
        ax.set_ylabel("Prot√©ines Moyennes (PDV%)")
        ax.grid(True)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Comparaison de la Complexit√© des Recettes":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique compare la complexit√© des recettes (temps de pr√©paration, nombre d'√©tapes et nombre d'ingr√©dients) entre les recettes v√©g√©tariennes, v√©ganes et autres.
            </div>
            """,
            unsafe_allow_html=True
        )
        vegetarian_recipes = data[data['vege'] == 1]
        vegan_recipes = data[data['vegan_final'] == 1]
        other_recipes = data[(data['vege'] == 0) & (data['vegan_final'] == 0)]
        variables = ['minutes', 'n_steps', 'n_ingredients']
        fig, axes = plt.subplots(1, 3, figsize=(12, 3), sharey=True)
        sns.boxplot(data=vegetarian_recipes[variables], ax=axes[0], palette="Blues")
        axes[0].set_title("Recettes V√©g√©tariennes")
        axes[0].set_xticks(range(len(variables)))
        axes[0].set_xticklabels(['Temps (min)', '√âtapes', 'Ingr√©dients'])
        axes[0].grid(True)
        sns.boxplot(data=vegan_recipes[variables], ax=axes[1], palette="Greens")
        axes[1].set_title("Recettes Vegan")
        axes[1].set_xticks(range(len(variables)))
        axes[1].set_xticklabels(['Temps (min)', '√âtapes', 'Ingr√©dients'])
        axes[1].grid(True)
        sns.boxplot(data=other_recipes[variables], ax=axes[2], palette="Reds")
        axes[2].set_title("Autres Recettes")
        axes[2].set_xticks(range(len(variables)))
        axes[2].set_xticklabels(['Temps (min)', '√âtapes', 'Ingr√©dients'])
        axes[2].grid(True)
        plt.suptitle("Comparaison des Temps, √âtapes et Ingr√©dients par Type de Recette", fontsize=16)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Comparaison S√©par√©e de la Complexit√© des Recettes":
        data['recipe_type'] = data.apply(
            lambda row: 'Vegan' if row['vegan_final'] == 1
                        else 'Vegetarienne' if row['vege'] == 1
                        else 'Other', axis=1
        )
        variables = ['log_minutes', 'n_steps', 'n_ingredients']
        titles = ['Temps de Pr√©paration (minutes)', 'Nombre d‚Äô√âtapes', 'Nombre d‚ÄôIngr√©dients']
        for var, title in zip(variables, titles):
            st.markdown(
                f"""
                <div class="content">
                ### Interpr√©tation :
                Ce graphique montre la {title.lower()} pour chaque type de recette (v√©g√©tariennes, v√©ganes et autres). Les barres d'erreur indiquent l'√©cart-type.
                </div>
                """,
                unsafe_allow_html=True
            )
            fig, ax = plt.subplots(figsize=(6, 3))
            sns.barplot(x='recipe_type', y=var, data=data, errorbar='sd', palette="pastel", ax=ax)
            ax.set_title(title, fontsize=14)
            ax.set_xlabel("Type de Recette")
            ax.set_ylabel(var)
            ax.grid(True)
            plt.tight_layout()
            st.pyplot(fig)

    elif selected_vis == "Matrice de Corr√©lation des Variables S√©lectionn√©es":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Cette matrice de corr√©lation montre les relations entre les diff√©rentes variables nutritionnelles et de complexit√© des recettes. Les valeurs de corr√©lation varient de -1 √† 1, o√π 1 indique une corr√©lation positive parfaite et -1 une corr√©lation n√©gative parfaite.
            </div>
            """,
            unsafe_allow_html=True
        )
        variables = [
            "calories",
            "sodium (PDV%)",
            "protein (PDV%)",
            "total fat (PDV%)",
            "saturated fat (PDV%)",
            "carbohydrates (PDV%)",
            "n_steps",
            "n_ingredients",
            "log_minutes",
            "interaction_steps_ingredients"
        ]
        correlation_data = data[variables]
        correlation_matrix = correlation_data.corr()
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap="coolwarm", cbar=True, ax=ax)
        ax.set_title("Matrice de Corr√©lation des Variables S√©lectionn√©es", fontsize=16)
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        st.pyplot(fig)

        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique montre la r√©partition des recettes v√©ganes parmi les recettes v√©g√©tariennes. Les pourcentages indiquent la proportion de chaque type de recette.
            </div>
            """,
            unsafe_allow_html=True
        )
        vegan_among_vegetarian_percentages = [(num_vegan / num_vegetarian) * 100, ((num_vegetarian - num_vegan) / num_vegetarian) * 100]
        vegan_among_vegetarian_labels = ['Vegan', 'V√©g√©tarienne (non-vegan)']

        fig, ax = plt.subplots(figsize=(5, 5))
        ax.pie(vegan_among_vegetarian_percentages, labels=vegan_among_vegetarian_labels, autopct="%.1f%%", startangle=90, colors=["#ff9999", "#66b3ff"])
        ax.set_title("R√©partition des recettes Vegan parmi les V√©g√©tariennes")
        plt.tight_layout()
        st.pyplot(fig)
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique montre la r√©partition des recettes v√©ganes parmi les recettes v√©g√©tariennes. Les pourcentages indiquent la proportion de chaque type de recette.
            </div>
            """,
            unsafe_allow_html=True
        )

# Section Exploration Interactive
if selected_option == "Exploration Interactive":
    st.sidebar.subheader("Filtrer les Recettes")
    max_calories = st.sidebar.slider("Calories Maximum", 0, int(data['calories'].max()), 500)
    max_sodium = st.sidebar.slider("Sodium Maximum", 0, int(data['sodium (PDV%)'].max()), 50)

    filtered_data = data[(data['calories'] <= max_calories) & (data['sodium (PDV%)'] <= max_sodium)]
    st.dataframe(filtered_data)

# Section √Ä propos
if selected_option == "√Ä propos":
    st.subheader("√Ä propos de cette application")
    st.markdown(
        """
        <div class="content">
        ### Informations sur l'application :
        Cette application a √©t√© con√ßue pour analyser des recettes v√©g√©tariennes et non-v√©g√©tariennes afin de mettre en lumi√®re leurs bienfaits nutritionnels.

        **Technologies utilis√©es :**
        - [Python](https://www.python.org/)
        - [Streamlit](https://streamlit.io/)
        - [Seaborn](https://seaborn.pydata.org/)
        - [Matplotlib](https://matplotlib.org/)

        **D√©velopp√© par :** Alfred Wande-Wula
        </div>
        """,
        unsafe_allow_html=True
    )


# Footer avec image
st.markdown(
    """
    <div style="text-align: center; margin-top: 50px;">
        <p style="color: gray; font-size: 0.9em;">Merci de visiter notre application d'analyse des recettes v√©g√©tariennes.</p>
    </div>
    """,
    unsafe_allow_html=True
)

