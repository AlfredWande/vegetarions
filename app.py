import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Configuration de la page
st.set_page_config(
    page_title="Analyse nutritionnelle des recettes v√©g√©tariennes / vegan",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Ajouter du CSS pour personnaliser le design
def local_css(file_name):
    try:
        with open(file_name) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    except FileNotFoundError:
        st.error(
            f"Le fichier CSS '{file_name}' est introuvable. Assurez-vous qu'il existe dans le r√©pertoire du projet."
        )


# Chargement du fichier CSS (assurez-vous qu'il existe dans votre projet)
local_css("docs/_static/style.css")

#style
st.markdown(
    """
    <style>
    /* Fond global de l'application */
    body {
        background-color: white; /* Fond blanc */
        color: black; /* Texte par d√©faut en noir pour le contraste */
    }

    /* Conserver l'image de fond pour .stApp */
    .stApp {
        background: url('https://img-3.journaldesfemmes.fr/x9Ghv5tUnuHOrOkweGUIuP2cPZU=/1240x/smart/38888207364b4e12a4058004322afa49/ccmcms-jdf/36666882.jpg') no-repeat center center fixed;
        background-size: cover;
    }

    /* Style pour le titre principal */
    .main-title {
        background: rgba(0, 0, 0, 0.8); /* Fond noir semi-transparent */
        padding: 40px;
        border-radius: 15px;
        margin-bottom: 20px;
        color: white; /* Texte en blanc */
    }

    /* Style pour la barre lat√©rale */
    [data-testid="stSidebar"] {
        background: rgba(0, 0, 0, 0.8) !important; /* Fond noir semi-transparent */
        padding: 20px !important; /* Espacement interne */
        border-radius: 15px !important; /* Coins arrondis */
        color: white !important; /* Texte en blanc */
    }

    /* Texte et liens dans la barre lat√©rale */
    [data-testid="stSidebar"] h1, 
    [data-testid="stSidebar"] h2, 
    [data-testid="stSidebar"] h3, 
    [data-testid="stSidebar"] span, 
    [data-testid="stSidebar"] p, 
    [data-testid="stSidebar"] a {
        color: white !important; /* Forcer tout le texte et les liens en blanc */
    }

    /* Suppression des bordures inutiles */
    [data-testid="stSidebar"] section {
        border: none !important;
    }

    /* Am√©liorer les boutons ou s√©lecteurs */
    [data-testid="stSidebar"] .css-1d391kg {
        background: rgba(255, 255, 255, 0.2) !important; /* Fond semi-transparent */
        color: white !important; /* Texte blanc */
        border-radius: 10px;
        padding: 10px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Charger les donn√©es pour visualisation
file_path = "./data/cleaned_recipes.csv"
data = pd.read_csv(file_path)

# Titre principal avec un fond visuel
st.markdown(
    """
    <div class="main-title">
        <h1 style="color: white; text-align: center; font-size: 3.5em;">üå± Analyse comparative des recettes v√©g√©tariennes / v√©ganes et des autres recettes </h1>
        <p style="color: white; text-align: center; font-size: 1.5em;">Une exploration interactive des types de recettes de cuisine .</p>
    </div>
    """,
    unsafe_allow_html=True,
)



# Menu lat√©ral stylis√©
st.sidebar.header("Navigation")
st.sidebar.markdown("Choisissez ce que vous souhaitez explorer :")

menu_options = [
    "Accueil",
    "Objectifs de l'application",
    "Visualisations",
    "Interactions et Tests",
    "√Ä propos",
]
selected_option = st.sidebar.radio("Sections", menu_options)

# Section Accueil
if selected_option == "Accueil":
    st.subheader(
        "Bienvenue sur l'application d'analyse des recettes v√©g√©tariennes et vegan !"
    )
    st.markdown(
        """
        <div class="content">
        Cette application permet de d'observer quelques tendances nutritionnelles dans les recettes v√©g√©tariennes / vegan..
        - Explorer les diff√©rences entre recettes v√©g√©tariennes / vegan et les autres recettes.

        Utilisez le menu √† gauche pour en savoir plus !
        </div>
        """,
        unsafe_allow_html=True,
    )

# Section Objectifs de l'application
if selected_option == "Objectifs de l'application":
    st.subheader("Objectifs de l'application")
    st.markdown(
        """
        <div class="content">
        ### Nos objectifs :
Cette application a pour but de fournir quelques √©l√©ments de comparaison sur les recettes v√©g√©tariennes et vegan et les autres recettes.
Nous esp√©rons que cette application sera une ressource utile pour les amateurs de cuisine.
        </div>
        """,
        unsafe_allow_html=True,
    )

# Section Visualisations
if selected_option == "Visualisations":
    st.subheader("Visualisations des Donn√©es")
    st.markdown("S√©lectionnez le graphique que vous souhaitez afficher :")

    # Options de visualisation
    vis_options = [
        "R√©partition des Recettes",
        "Diagramme en Barres des Types de Recettes",
        "Boxplots des Variables Nutritionnelles",
        "Comparaison des Calories par Type de Recette",
        "Comparaison des Prot√©ines par Type de Recette",
        "Comparaison de la Complexit√© des Recettes",
        "Indice de complexit√© des recettes",
        "Comparaison S√©par√©e de la Complexit√© des Recettes",
        "Matrice de Corr√©lation des Variables S√©lectionn√©es",
    ]
    selected_vis = st.radio("Graphiques", vis_options)

    # Affichage des visualisations en fonction de la s√©lection
    if selected_vis == "R√©partition des Recettes":
        st.markdown(
            """
            <div class="content">
            Ce graphique, r√©alis√© √† partir d'environ 150 000 recettes, montre une r√©partition relativement √©quilibr√©e entre les recettes v√©g√©tariennes (48%) et non-v√©g√©tariennes (52%).
            Cela sugg√®re une diversit√© dans les types de recettes, avec une pr√©sence significative de recettes v√©g√©tariennes.
                             
            </div>
            """,
            unsafe_allow_html=True,
        )
        num_vegetarian = data[data["vege"] == 1].shape[0]
        num_vegan = data[data["vegan_final"] == 1].shape[0]
        num_non_vegetarian = data[data["vege"] == 0].shape[0]

        total = num_vegetarian + num_non_vegetarian
        vegetarian_vs_other = [num_vegetarian, num_non_vegetarian]
        vegetarian_vs_other_labels = ["V√©g√©tariennes", "Non V√©g√©tariennes"]
        vegetarian_vs_other_percentages = [
            (count / total) * 100 for count in vegetarian_vs_other
        ]

        fig, ax = plt.subplots(figsize=(5, 5))
        ax.pie(
            vegetarian_vs_other_percentages,
            labels=vegetarian_vs_other_labels,
            autopct="%.1f%%",
            startangle=90,
            colors=["#66b3ff", "#99ff99"],
        )
        ax.set_title("R√©partition des recettes (V√©g√©tariennes vs Non V√©g√©tariennes)")
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Diagramme en Barres des Types de Recettes":
        st.subheader("Diagramme en Barres des Types de Recettes")
        st.markdown(
            """
            <div class="content">
            Le nombre de recettes v√©g√©tariennes (valeur = 1) est plus √©lev√© que celui des recettes v√©ganes.
            Cependant, le nombre de recettes qui ne sont ni v√©ganes ni v√©g√©tariennes surpassent les deux cat√©gories.
            Cela refl√®te que bien que les options v√©g√©tariennes soient populaires, le v√©ganisme reste moins repr√©sent√©.
                                
            </div>
            """,
            unsafe_allow_html=True,
        )
        # Compter les occurrences pour chaque variable binaire
        vegan_counts = data["vegan_final"].value_counts().sort_index()
        vege_counts = data["vege"].value_counts().sort_index()

        # Pr√©parer les donn√©es pour le graphique
        bar_data = (
            pd.DataFrame({"Vegan": vegan_counts, "V√©g√©tarien": vege_counts})
            .reset_index()
            .rename(columns={"index": "Cat√©gorie"})
        )

        # Tracer le diagramme en barres
        fig, ax = plt.subplots(figsize=(8, 5))
        bar_data.plot(kind="bar", x="Cat√©gorie", ax=ax, rot=0)

        # Ajouter des titres et des labels
        ax.set_title("Nombre de Recettes par Type (Vegan et V√©g√©tarien)")
        ax.set_xlabel("Cat√©gories (0 = Non, 1 = Oui)")
        ax.set_ylabel("Nombre de Recettes")
        ax.grid(axis="y", linestyle="--", alpha=0.7)

        # Afficher le graphique avec Streamlit
        st.pyplot(fig)

    elif selected_vis == "Boxplots des Variables Nutritionnelles":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
#Grille de lecture : un boxplot permet de visualiser la distribution d'une variable num√©rique. Il met en √©vidence les valeurs principales (comme la m√©diane et les quartiles) ainsi que les √©ventuelles valeurs aberrantes
Chaque variable nutritionnelle (calories, sodium, prot√©ines, graisses, glucides) pr√©sente une distribution diff√©rente avec des m√©dianes bien visible.
Les donn√©es montrent une h√©t√©rog√©n√©it√© dans les profils nutritionnels des recettes. Cela peut refl√©ter des diff√©rences entre recettes simples et √©labor√©es ou des diff√©rences entre types de recettes (v√©g√©tariennes vs non-v√©g√©tariennes)
            </div>
            """,
            unsafe_allow_html=True,
        )
        variables = [
            "calories",
            "sodium (PDV%)",
            "protein (PDV%)",
            "total fat (PDV%)",
            "saturated fat (PDV%)",
            "carbohydrates (PDV%)",
        ]
        df_melted = data[variables].melt(var_name="Variable", value_name="Valeur")
        fig, ax = plt.subplots(figsize=(8, 4))
        sns.boxplot(x="Variable", y="Valeur", data=df_melted, palette="Set2", ax=ax)
        ax.set_title("Boxplots regroup√©s des Variables Nutritionnelles")
        ax.set_xlabel("Variables")
        ax.set_ylabel("Valeurs")
        ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
        ax.grid(True)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Comparaison des Calories par Type de Recette":
        st.markdown(
            """
            <div class="content">
Les recettes v√©ganes et v√©g√©tariennes sont g√©n√©ralement moins caloriques que les autres, ce qui correspond √† leur image de repas plus sains.
Ce gra^hique le montre avec une m√©diane plus √©lev√©e plus √©lev√©e pour les recettes non caloriques et une r√©partition plus faible pour les recettes v√©g√©tariennes ou v√©ganes. 
            </div>
            """,
            unsafe_allow_html=True,
        )
        data["recipe_type"] = data.apply(
            lambda row: (
                "Vegan"
                if row["vegan_final"] == 1
                else "Vegetarienne" if row["vege"] == 1 else "Other"
            ),
            axis=1,
        )
        fig, ax = plt.subplots(figsize=(6, 3))
        sns.boxplot(x="recipe_type", y="calories", data=data, palette="Set2", ax=ax)
        ax.set_title("Comparaison des Calories par Type de Recette")
        ax.set_xlabel("Type de Recette")
        ax.set_ylabel("Calories")
        ax.grid(True)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Comparaison des Prot√©ines par Type de Recette":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
Les recettes non v√©g√©tariennes semblent contenir plus de prot√©ines en moyenne.
Les recettes v√©ganes et v√©g√©tariennes ont des moyennes similaires, mais leurs distributions sont plus √©troites.
Les prot√©ines semblent √™tre donc plus pr√©sentes dans les recettes contenant de la viande ou des produits animaliers.
            </div>
            """,
            unsafe_allow_html=True,
        )
        data["recipe_type"] = data.apply(
            lambda row: (
                "Vegan"
                if row["vegan_final"] == 1
                else "Vegetarienne" if row["vege"] == 1 else "Other"
            ),
            axis=1,
        )
        fig, ax = plt.subplots(figsize=(6, 3))
        sns.barplot(
            x="recipe_type",
            y="protein (PDV%)",
            data=data,
            errorbar="sd",
            palette="pastel",
            ax=ax,
        )
        ax.set_title("Moyenne des Prot√©ines par Type de Recette")
        ax.set_xlabel("Type de Recette")
        ax.set_ylabel("Prot√©ines Moyennes (PDV%)")
        ax.grid(True)
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Comparaison de la Complexit√© des Recettes":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
            Ce graphique compare la complexit√© des recettes (temps de pr√©paration, nombre d'√©tapes et nombre d'ingr√©dients) entre les recettes v√©g√©tariennes, v√©ganes et autres.
            Les recettes v√©g√©tariennes et vegan appraissent relativement moins complexe selon ces trois crit√®res. Elles prennent moins de temps, contiennent moins d'ingr√©dients et recqui√®rent moisn d'√©tapes.
            </div>
            """,
            unsafe_allow_html=True,
        )
        vegetarian_recipes = data[data["vege"] == 1]
        vegan_recipes = data[data["vegan_final"] == 1]
        other_recipes = data[(data["vege"] == 0) & (data["vegan_final"] == 0)]
        variables = ["minutes", "n_steps", "n_ingredients"]
        fig, axes = plt.subplots(1, 3, figsize=(12, 3), sharey=True)
        sns.boxplot(data=vegetarian_recipes[variables], ax=axes[0], palette="Blues")
        axes[0].set_title("Recettes V√©g√©tariennes")
        axes[0].set_xticks(range(len(variables)))
        axes[0].set_xticklabels(["Temps (min)", "√âtapes", "Ingr√©dients"])
        axes[0].grid(True)
        sns.boxplot(data=vegan_recipes[variables], ax=axes[1], palette="Greens")
        axes[1].set_title("Recettes Vegan")
        axes[1].set_xticks(range(len(variables)))
        axes[1].set_xticklabels(["Temps (min)", "√âtapes", "Ingr√©dients"])
        axes[1].grid(True)
        sns.boxplot(data=other_recipes[variables], ax=axes[2], palette="Reds")
        axes[2].set_title("Autres Recettes")
        axes[2].set_xticks(range(len(variables)))
        axes[2].set_xticklabels(["Temps (min)", "√âtapes", "Ingr√©dients"])
        axes[2].grid(True)
        plt.suptitle(
            "Comparaison des Temps, √âtapes et Ingr√©dients par Type de Recette",
            fontsize=16,
        )
        plt.tight_layout()
        st.pyplot(fig)

    elif selected_vis == "Comparaison S√©par√©e de la Complexit√© des Recettes":
        data["recipe_type"] = data.apply(
            lambda row: (
                "Vegan"
                if row["vegan_final"] == 1
                else "Vegetarienne" if row["vege"] == 1 else "Other"
            ),
            axis=1,
        )
        variables = ["log_minutes", "n_steps", "n_ingredients"]
        titles = [
            "Temps de Pr√©paration (minutes)",
            "Nombre d‚Äô√âtapes",
            "Nombre d‚ÄôIngr√©dients",
        ]
        for var, title in zip(variables, titles):
            st.markdown(
                f"""
                <div class="content">
                ### Interpr√©tation :
                Ce graphique montre la {title.lower()} pour chaque type de recette (v√©g√©tariennes, v√©ganes et autres). Les barres d'erreur indiquent l'√©cart-type.
                </div>
                """,
                unsafe_allow_html=True,
            )
            fig, ax = plt.subplots(figsize=(6, 3))
            sns.barplot(
                x="recipe_type",
                y=var,
                data=data,
                errorbar="sd",
                palette="pastel",
                ax=ax,
            )
            ax.set_title(title, fontsize=14)
            ax.set_xlabel("Type de Recette")
            ax.set_ylabel(var)
            ax.grid(True)
            plt.tight_layout()
            st.pyplot(fig)

    elif selected_vis == "Matrice de Corr√©lation des Variables S√©lectionn√©es":
        st.markdown(
            """
            <div class="content">
            ### Interpr√©tation :
Cette carte repr√©sente le lien entre les variables, plus le lien est √©troit plus les couleurs sont fonc√©es. 
En bref, les calories montrent une forte corr√©lation avec les graisses totales (0.83) et les glucides (0.67), ce qui est attendu d'un point de vue nutritionnel.
Les corr√©lations n√©gatives avec les indicateurs "vegan_final" et "vege" sugg√®rent que ces types de recettes sont moins riches en calories et graisses.
Les recettes v√©ganes et v√©g√©tariennes sont associ√©es √† des profils nutritionnels plus l√©gers. Enfin, les fortes corr√©lations entre variables nutritionnelles refl√®tent leur interd√©pendance dans les recettes.
            </div>
            """,
            unsafe_allow_html=True,
        )
        variables = [
            "calories",
            "sodium (PDV%)",
            "protein (PDV%)",
            "total fat (PDV%)",
            "saturated fat (PDV%)",
            "carbohydrates (PDV%)",
            "n_steps",
            "interaction_steps_ingredients",
            "vege",
            "vegan_final",
        ]
        correlation_data = data[variables]
        correlation_matrix = correlation_data.corr()
        fig, ax = plt.subplots(figsize=(8, 5))

        # Cr√©ation de la heatmap
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(
            correlation_matrix, annot=True, fmt=".2f", cmap="coolwarm", cbar=True, ax=ax
        )
        ax.set_title("Matrice de Corr√©lation des Variables S√©lectionn√©es", fontsize=16)
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()
        st.pyplot(fig)

# Section √Ä propos
if selected_option == "√Ä propos":
    st.subheader("√Ä propos de cette application")
    st.markdown(
        """
        ### Informations sur l'application :
        Cette application a √©t√© con√ßue pour analyser des recettes v√©g√©tariennes et non-v√©g√©tariennes afin de mettre en lumi√®re leurs bienfaits nutritionnels.

        **Technologies utilis√©es :**
        - [Python](https://www.python.org/)
        - [Streamlit](https://streamlit.io/)
        - [Seaborn](https://seaborn.pydata.org/)
        - [Matplotlib](https://matplotlib.org/)

        **D√©velopp√© par :** Alfred Wande-Wula
        """
    )


    # Footer avec image
    st.markdown(
        """
        <div style="text-align: center; margin-top: 50px;">
            <p style="color: gray; font-size: 0.9em;">Merci de visiter notre application d'analyse des recettes v√©g√©tariennes.</p>
        </div>
        """,
        unsafe_allow_html=True,
    )
